Java 数据结构
Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：

枚举（Enumeration）
位集合（BitSet）
向量（Vector）
栈（Stack）
字典（Dictionary）
哈希表（Hashtable）
属性（Properties）
以上这些类是传统遗留的，在Java2中引入了一种新的框架-集合框架(Collection)，我们后面再讨论。

枚举（Enumeration）
枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。

例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。

关于枚举接口的更多信息，请参见枚举（Enumeration）。

位集合（BitSet）
位集合类实现了一组可以单独设置和清除的位或标志。

该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一"位"，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。

关于该类的更多信息，请参见位集合（BitSet）。

向量（Vector）
向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。

和数组一样，Vector对象的元素也能通过索引访问。

使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。

关于该类的更多信息，请参见向量(Vector)

栈（Stack）
栈（Stack）实现了一个后进先出（LIFO）的数据结构。

你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。

当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。

关于该类的更多信息，请参见栈（Stack）。

字典（Dictionary）
字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。

当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。

由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。

关于该类的更多信息，请参见字典（ Dictionary）。

哈希表（Hashtable）
Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。

例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。

哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。

关于该类的更多信息，请参见哈希表（HashTable）。

属性（Properties）
Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。

Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。

关于该类的更多信息，请参见属性（Properties）。

 Java 包(package)Java 集合框架 
 点我分享笔记
 Java Number & Math 类
 一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：byte、int、long、double 等。

 实例
 int a = 5000;
 float b = 13.65f;
 byte c = 0x4a;
 然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。

 所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。

 包装类	基本数据类型
 Boolean	boolean
 Byte	byte
 Short	short
 Integer	int
 Long	long
 Character	char
 Float	float
 Double	double
 Java Number类

 这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。

 下面是一个使用 Integer 对象的实例：

 Test.java 文件代码：
 public class Test{

    public static void main(String[] args){
       Integer x = 5;
       x =  x + 10;
       System.out.println(x);
    }
 }
 以上实例编译运行结果如下：

 15
 当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。

 Java Math 类
 Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。

 Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。

 Test.java 文件代码：
 public class Test {
     public static void main (String []args)
     {
         System.out.println("90 度的正弦值：" + Math.sin(Math.PI/2));
         System.out.println("0度的余弦值：" + Math.cos(0));
         System.out.println("60度的正切值：" + Math.tan(Math.PI/3));
         System.out.println("1的反正切值： " + Math.atan(1));
         System.out.println("π/2的角度值：" + Math.toDegrees(Math.PI/2));
         System.out.println(Math.PI);
     }
 }
 以上实例编译运行结果如下：

 90 度的正弦值：1.0
 0度的余弦值：1.0
 60度的正切值：1.7320508075688767
 1的反正切值： 0.7853981633974483
 π/2的角度值：90.0
 3.141592653589793
 Number & Math 类方法
 下面的表中列出的是 Number & Math 类常用的一些方法：

 序号	方法与描述
 1	xxxValue()
 将 Number 对象转换为xxx数据类型的值并返回。
 2	compareTo()
 将number对象与参数比较。
 3	equals()
 判断number对象是否与参数相等。
 4	valueOf()
 返回一个 Number 对象指定的内置数据类型
 5	toString()
 以字符串形式返回值。
 6	parseInt()
 将字符串解析为int类型。
 7	abs()
 返回参数的绝对值。
 8	ceil()
 返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。
 9	floor()
 返回小于等于（<=）给定参数的最大整数 。
 10	rint()
 返回与参数最接近的整数。返回类型为double。
 11	round()
 它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。
 12	min()
 返回两个参数中的最小值。
 13	max()
 返回两个参数中的最大值。
 14	exp()
 返回自然数底数e的参数次方。
 15	log()
 返回参数的自然数底数的对数值。
 16	pow()
 返回第一个参数的第二个参数次方。
 17	sqrt()
 求参数的算术平方根。
 18	sin()
 求指定double类型参数的正弦值。
 19	cos()
 求指定double类型参数的余弦值。
 20	tan()
 求指定double类型参数的正切值。
 21	asin()
 求指定double类型参数的反正弦值。
 22	acos()
 求指定double类型参数的反余弦值。
 23	atan()
 求指定double类型参数的反正切值。
 24	atan2()
 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。
 25	toDegrees()
 将参数转化为角度。
 26	toRadians()
 将角度转换为弧度。
 27	random()
 返回一个随机数。
 Math 的 floor,round 和 ceil 方法实例比较
 参数	Math.floor	Math.round	Math.ceil
 1.4	1	1	2
 1.5	1	2	2
 1.6	1	2	2
 -1.4	-2	-1	-1
 -1.5	-2	-1	-1
 -1.6	-2	-2	-1
 floor,round 和 ceil 实例：
 public class Main {
   public static void main(String[] args) {
     double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };
     for (double num : nums) {
       test(num);
     }
   }

   private static void test(double num) {
     System.out.println("Math.floor(" + num + ")=" + Math.floor(num));
     System.out.println("Math.round(" + num + ")=" + Math.round(num));
     System.out.println("Math.ceil(" + num + ")=" + Math.ceil(num));
   }
 }
 以上实例执行输出结果为：

 Math.floor(1.4)=1.0
 Math.round(1.4)=1
 Math.ceil(1.4)=2.0
 Math.floor(1.5)=1.0
 Math.round(1.5)=2
 Math.ceil(1.5)=2.0
 Math.floor(1.6)=1.0
 Math.round(1.6)=2
 Math.ceil(1.6)=2.0Java 数据结构
                   Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：

                   枚举（Enumeration）
                   位集合（BitSet）
                   向量（Vector）
                   栈（Stack）
                   字典（Dictionary）
                   哈希表（Hashtable）
                   属性（Properties）
                   以上这些类是传统遗留的，在Java2中引入了一种新的框架-集合框架(Collection)，我们后面再讨论。

                   枚举（Enumeration）
                   枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。

                   例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。

                   关于枚举接口的更多信息，请参见枚举（Enumeration）。

                   位集合（BitSet）
                   位集合类实现了一组可以单独设置和清除的位或标志。

                   该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一"位"，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。

                   关于该类的更多信息，请参见位集合（BitSet）。

                   向量（Vector）
                   向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。

                   和数组一样，Vector对象的元素也能通过索引访问。

                   使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。

                   关于该类的更多信息，请参见向量(Vector)

                   栈（Stack）
                   栈（Stack）实现了一个后进先出（LIFO）的数据结构。

                   你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。

                   当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。

                   关于该类的更多信息，请参见栈（Stack）。

                   字典（Dictionary）
                   字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。

                   当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。

                   由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。

                   关于该类的更多信息，请参见字典（ Dictionary）。

                   哈希表（Hashtable）
                   Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。

                   例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。

                   哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。

                   关于该类的更多信息，请参见哈希表（HashTable）。

                   属性（Properties）
                   Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。

                   Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。

                   关于该类的更多信息，请参见属性（Properties）。

                    Java 包(package)Java 集合框架
                    点我分享笔记
                    Java Number & Math 类
                    一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：byte、int、long、double 等。

                    实例
                    int a = 5000;
                    float b = 13.65f;
                    byte c = 0x4a;
                    然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。

                    所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。

                    包装类	基本数据类型
                    Boolean	boolean
                    Byte	byte
                    Short	short
                    Integer	int
                    Long	long
                    Character	char
                    Float	float
                    Double	double
                    Java Number类

                    这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。

                    下面是一个使用 Integer 对象的实例：

                    Test.java 文件代码：
                    public class Test{

                       public static void main(String[] args){
                          Integer x = 5;
                          x =  x + 10;
                          System.out.println(x);
                       }
                    }
                    以上实例编译运行结果如下：

                    15
                    当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。

                    Java Math 类
                    Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。

                    Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。

                    Test.java 文件代码：
                    public class Test {
                        public static void main (String []args)
                        {
                            System.out.println("90 度的正弦值：" + Math.sin(Math.PI/2));
                            System.out.println("0度的余弦值：" + Math.cos(0));
                            System.out.println("60度的正切值：" + Math.tan(Math.PI/3));
                            System.out.println("1的反正切值： " + Math.atan(1));
                            System.out.println("π/2的角度值：" + Math.toDegrees(Math.PI/2));
                            System.out.println(Math.PI);
                        }
                    }
                    以上实例编译运行结果如下：

                    90 度的正弦值：1.0
                    0度的余弦值：1.0
                    60度的正切值：1.7320508075688767
                    1的反正切值： 0.7853981633974483
                    π/2的角度值：90.0
                    3.141592653589793
                    Number & Math 类方法
                    下面的表中列出的是 Number & Math 类常用的一些方法：

                    序号	方法与描述
                    1	xxxValue()
                    将 Number 对象转换为xxx数据类型的值并返回。
                    2	compareTo()
                    将number对象与参数比较。
                    3	equals()
                    判断number对象是否与参数相等。
                    4	valueOf()
                    返回一个 Number 对象指定的内置数据类型
                    5	toString()
                    以字符串形式返回值。
                    6	parseInt()
                    将字符串解析为int类型。
                    7	abs()
                    返回参数的绝对值。
                    8	ceil()
                    返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。
                    9	floor()
                    返回小于等于（<=）给定参数的最大整数 。
                    10	rint()
                    返回与参数最接近的整数。返回类型为double。
                    11	round()
                    它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。
                    12	min()
                    返回两个参数中的最小值。
                    13	max()
                    返回两个参数中的最大值。
                    14	exp()
                    返回自然数底数e的参数次方。
                    15	log()
                    返回参数的自然数底数的对数值。
                    16	pow()
                    返回第一个参数的第二个参数次方。
                    17	sqrt()
                    求参数的算术平方根。
                    18	sin()
                    求指定double类型参数的正弦值。
                    19	cos()
                    求指定double类型参数的余弦值。
                    20	tan()
                    求指定double类型参数的正切值。
                    21	asin()
                    求指定double类型参数的反正弦值。
                    22	acos()
                    求指定double类型参数的反余弦值。
                    23	atan()
                    求指定double类型参数的反正切值。
                    24	atan2()
                    将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。
                    25	toDegrees()
                    将参数转化为角度。
                    26	toRadians()
                    将角度转换为弧度。
                    27	random()Java 数据结构
                                Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：

                                枚举（Enumeration）
                                位集合（BitSet）
                                向量（Vector）
                                栈（Stack）
                                字典（Dictionary）
                                哈希表（Hashtable）
                                属性（Properties）
                                以上这些类是传统遗留的，在Java2中引入了一种新的框架-集合框架(Collection)，我们后面再讨论。

                                枚举（Enumeration）
                                枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。

                                例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。

                                关于枚举接口的更多信息，请参见枚举（Enumeration）。

                                位集合（BitSet）
                                位集合类实现了一组可以单独设置和清除的位或标志。

                                该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一"位"，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。

                                关于该类的更多信息，请参见位集合（BitSet）。

                                向量（Vector）
                                向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。

                                和数组一样，Vector对象的元素也能通过索引访问。

                                使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。

                                关于该类的更多信息，请参见向量(Vector)

                                栈（Stack）
                                栈（Stack）实现了一个后进先出（LIFO）的数据结构。

                                你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。

                                当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。

                                关于该类的更多信息，请参见栈（Stack）。

                                字典（Dictionary）
                                字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。

                                当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。

                                由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。

                                关于该类的更多信息，请参见字典（ Dictionary）。

                                哈希表（Hashtable）
                                Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。

                                例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。

                                哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。

                                关于该类的更多信息，请参见哈希表（HashTable）。

                                属性（Properties）
                                Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。

                                Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。

                                关于该类的更多信息，请参见属性（Properties）。

                                 Java 包(package)Java 集合框架
                                 点我分享笔记
                                 Java Number & Math 类
                                 一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：byte、int、long、double 等。

                                 实例
                                 int a = 5000;
                                 float b = 13.65f;
                                 byte c = 0x4a;
                                 然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。

                                 所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。

                                 包装类	基本数据类型
                                 Boolean	boolean
                                 Byte	byte
                                 Short	short
                                 Integer	int
                                 Long	long
                                 Character	char
                                 Float	float
                                 Double	double
                                 Java Number类

                                 这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。

                                 下面是一个使用 Integer 对象的实例：

                                 Test.java 文件代码：
                                 public class Test{

                                    public static void main(String[] args){
                                       Integer x = 5;
                                       x =  x + 10;
                                       System.out.println(x);
                                    }
                                 }
                                 以上实例编译运行结果如下：

                                 15
                                 当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。

                                 Java Math 类
                                 Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。

                                 Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。

                                 Test.java 文件代码：
                                 public class Test {
                                     public static void main (String []args)
                                     {
                                         System.out.println("90 度的正弦值：" + Math.sin(Math.PI/2));
                                         System.out.println("0度的余弦值：" + Math.cos(0));
                                         System.out.println("60度的正切值：" + Math.tan(Math.PI/3));
                                         System.out.println("1的反正切值： " + Math.atan(1));
                                         System.out.println("π/2的角度值：" + Math.toDegrees(Math.PI/2));
                                         System.out.println(Math.PI);
                                     }
                                 }
                                 以上实例编译运行结果如下：

                                 90 度的正弦值：1.0
                                 0度的余弦值：1.0
                                 60度的正切值：1.7320508075688767
                                 1的反正切值： 0.7853981633974483
                                 π/2的角度值：90.0
                                 3.141592653589793
                                 Number & Math 类方法
                                 下面的表中列出的是 Number & Math 类常用的一些方法：

                                 序号	方法与描述
                                 1	xxxValue()
                                 将 Number 对象转换为xxx数据类型的值并返回。
                                 2	compareTo()
                                 将number对象与参数比较。
                                 3	equals()
                                 判断number对象是否与参数相等。
                                 4	valueOf()
                                 返回一个 Number 对象指定的内置数据类型
                                 5	toString()
                                 以字符串形式返回值。
                                 6	parseInt()
                                 将字符串解析为int类型。
                                 7	abs()
                                 返回参数的绝对值。
                                 8	ceil()
                                 返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。
                                 9	floor()
                                 返回小于等于（<=）给定参数的最大整数 。
                                 10	rint()
                                 返回与参数最接近的整数。返回类型为double。
                                 11	round()
                                 它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。
                                 12	min()
                                 返回两个参数中的最小值。
                                 13	max()
                                 返回两个参数中的最大值。
                                 14	exp()
                                 返回自然数底数e的参数次方。
                                 15	log()
                                 返回参数的自然数底数的对数值。
                                 16	pow()
                                 返回第一个参数的第二个参数次方。
                                 17	sqrt()
                                 求参数的算术平方根。
                                 18	sin()Java 数据结构
                                         Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：

                                         枚举（Enumeration）
                                         位集合（BitSet）
                                         向量（Vector）
                                         栈（Stack）
                                         字典（Dictionary）
                                         哈希表（Hashtable）
                                         属性（Properties）
                                         以上这些类是传统遗留的，在Java2中引入了一种新的框架-集合框架(Collection)，我们后面再讨论。

                                         枚举（Enumeration）
                                         枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。

                                         例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。

                                         关于枚举接口的更多信息，请参见枚举（Enumeration）。

                                         位集合（BitSet）
                                         位集合类实现了一组可以单独设置和清除的位或标志。

                                         该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一"位"，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。

                                         关于该类的更多信息，请参见位集合（BitSet）。

                                         向量（Vector）
                                         向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。

                                         和数组一样，Vector对象的元素也能通过索引访问。

                                         使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。

                                         关于该类的更多信息，请参见向量(Vector)

                                         栈（Stack）
                                         栈（Stack）实现了一个后进先出（LIFO）的数据结构。

                                         你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。

                                         当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。

                                         关于该类的更多信息，请参见栈（Stack）。

                                         字典（Dictionary）
                                         字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。

                                         当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。

                                         由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。

                                         关于该类的更多信息，请参见字典（ Dictionary）。

                                         哈希表（Hashtable）
                                         Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。

                                         例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。

                                         哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。

                                         关于该类的更多信息，请参见哈希表（HashTable）。

                                         属性（Properties）
                                         Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。

                                         Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。

                                         关于该类的更多信息，请参见属性（Properties）。

                                          Java 包(package)Java 集合框架
                                          点我分享笔记
                                          Java Number & Math 类
                                          一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：byte、int、long、double 等。

                                          实例
                                          int a = 5000;
                                          float b = 13.65f;
                                          byte c = 0x4a;
                                          然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。

                                          所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。

                                          包装类	基本数据类型
                                          Boolean	boolean
                                          Byte	byte
                                          Short	short
                                          Integer	int
                                          Long	long
                                          Character	char
                                          Float	float
                                          Double	double
                                          Java Number类

                                          这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。

                                          下面是一个使用 Integer 对象的实例：

                                          Test.java 文件代码：
                                          public class Test{

                                             public static void main(String[] args){
                                                Integer x = 5;
                                                x =  x + 10;
                                                System.out.println(x);
                                             }
                                          }
                                          以上实例编译运行结果如下：

                                          15
                                          当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。

                                          Java Math 类
                                          Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。

                                          Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。

                                          Test.java 文件代码：
                                          public class Test {
                                              public static void main (String []args)
                                              {
                                                  System.out.println("90 度的正弦值：" + Math.sin(Math.PI/2));
                                                  System.out.println("0度的余弦值：" + Math.cos(0));
                                                  System.out.println("60度的正切值：" + Math.tan(Math.PI/3));
                                                  System.out.println("1的反正切值： " + Math.atan(1));
                                                  System.out.println("π/2的角度值：" + Math.toDegrees(Math.PI/2));
                                                  System.out.println(Math.PI);
                                              }
                                          }
                                          以上实例编译运行结果如下：

                                          90 度的正弦值：1.0
                                          0度的余弦值：1.0
                                          60度的正切值：1.7320508075688767
                                          1的反正切值： 0.7853981633974483
                                          π/2的角度值：90.0
                                          3.141592653589793
                                          Number & Math 类方法
                                          下面的表中列出的是 Number & Math 类常用的一些方法：

                                          序号	方法与描述
                                          1	xxxValue()
                                          将 Number 对象转换为xxx数据类型的值并返回。
                                          2	compareTo()
                                          将number对象与参数比较。
                                          3	equals()
                                          判断number对象是否与参数相等。
                                          4	valueOf()
                                          返回一个 Number 对象指定的内置数据类型
                                          5	toString()
                                          以字符串形式返回值。
                                          6	parseInt()
                                          将字符串解析为int类型。
                                          7	abs()
                                          返回参数的绝对值。
                                          8	ceil()
                                          返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。
                                          9	floor()
                                          返回小于等于（<=）给定参数的最大整数 。
                                          10	rint()
                                          返回与参数最接近的整数。返回类型为double。
                                          11	round()
                                          它表示四舍五入，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。
                                          12	min()
                                          返回两个参数中的最小值。
                                          13	max()
                                          返回两个参数中的最大值。
                                          14	exp()
                                          返回自然数底数e的参数次方。
                                          15	log()
                                          返回参数的自然数底数的对数值。
                                          16	pow()
                                          返回第一个参数的第二个参数次方。
                                          17	sqrt()
                                          求参数的算术平方根。
                                          18	sin()
                                          求指定double类型参数的正弦值。
                                          19	cos()
                                          求指定double类型参数的余弦值。
                                          20	tan()
                                          求指定double类型参数的正切值。
                                          21	asin()
                                          求指定double类型参数的反正弦值。
                                          22	acos()
                                          求指定double类型参数的反余弦值。
                                          23	atan()
                                          求指定double类型参数的反正切值。
                                          24	atan2()
                                          将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。
                                          25	toDegrees()
                                          将参数转化为角度。
                                          26	toRadians()
                                          将角度转换为弧度。
                                          27	random()
                                          返回一个随机数。
                                          Math 的 floor,round 和 ceil 方法实例比较
                                          参数	Math.floor	Math.round	Math.ceil
                                          1.4	1	1	2
                                          1.5	1	2	2
                                          1.6	1	2	2
                                          -1.4	-2	-1	-1
                                          -1.5	-2	-1	-1
                                          -1.6	-2	-2	-1
                                          floor,round 和 ceil 实例：
                                          public class Main {
                                            public static void main(String[] args) {
                                              double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };
                                              for (double num : nums) {
                                                test(num);
                                              }
                                            }

                                            private static void test(double num) {
                                              System.out.println("Math.floor(" + num + ")=" + Math.floor(num));
                                              System.out.println("Math.round(" + num + ")=" + Math.round(num));
                                              System.out.println("Math.ceil(" + num + ")=" + Math.ceil(num));
                                            }
                                          }
                                          以上实例执行输出结果为：

                                          Math.floor(1.4)=1.0
                                          Math.round(1.4)=1
                                          Math.ceil(1.4)=2.0
                                          Math.floor(1.5)=1.0
                                          Math.round(1.5)=2
                                          Math.ceil(1.5)=2.0
                                          Math.floor(1.6)=1.0
                                          Math.round(1.6)=2
                                          Math.ceil(1.6)=2.0
                                          Math.floor(-1.4)=-2.0
                                          Math.round(-1.4)=-1
                                          Math.ceil(-1.4)=-1.0
                                          Math.floor(-1.5)=-2.0
                                          Math.round(-1.5)=-1
                                          Math.ceil(-1.5)=-1.0
                                          Math.floor(-1.6)=-2.0
                                          Math.round(-1.6)=-2
                                          Math.ceil(-1.6)=-1.0
                                           Java switch case 语句Java Character 类
                                          6 篇笔记
                                 求指定double类型参数的正弦值。
                                 19	cos()
                                 求指定double类型参数的余弦值。
                                 20	tan()
                                 求指定double类型参数的正切值。
                                 21	asin()
                                 求指定double类型参数的反正弦值。
                                 22	acos()
                                 求指定double类型参数的反余弦值。
                                 23	atan()
                                 求指定double类型参数的反正切值。
                                 24	atan2()
                                 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。
                                 25	toDegrees()
                                 将参数转化为角度。
                                 26	toRadians()
                                 将角度转换为弧度。
                                 27	random()
                                 返回一个随机数。
                                 Math 的 floor,round 和 ceil 方法实例比较
                                 参数	Math.floor	Math.round	Math.ceil
                                 1.4	1	1	2
                                 1.5	1	2	2
                                 1.6	1	2	2
                                 -1.4	-2	-1	-1
                                 -1.5	-2	-1	-1
                                 -1.6	-2	-2	-1
                                 floor,round 和 ceil 实例：
                                 public class Main {
                                   public static void main(String[] args) {
                                     double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };
                                     for (double num : nums) {
                                       test(num);
                                     }
                                   }

                                   private static void test(double num) {
                                     System.out.println("Math.floor(" + num + ")=" + Math.floor(num));
                                     System.out.println("Math.round(" + num + ")=" + Math.round(num));
                                     System.out.println("Math.ceil(" + num + ")=" + Math.ceil(num));
                                   }
                                 }
                                 以上实例执行输出结果为：

                                 Math.floor(1.4)=1.0
                                 Math.round(1.4)=1
                                 Math.ceil(1.4)=2.0
                                 Math.floor(1.5)=1.0
                                 Math.round(1.5)=2
                                 Math.ceil(1.5)=2.0
                                 Math.floor(1.6)=1.0
                                 Math.round(1.6)=2
                                 Math.ceil(1.6)=2.0
                                 Math.floor(-1.4)=-2.0
                                 Math.round(-1.4)=-1
                                 Math.ceil(-1.4)=-1.0
                                 Math.floor(-1.5)=-2.0
                                 Math.round(-1.5)=-1
                                 Math.ceil(-1.5)=-1.0
                                 Math.floor(-1.6)=-2.0
                                 Math.round(-1.6)=-2
                                 Math.ceil(-1.6)=-1.0
                                  Java switch case 语句Java Character 类
                                 6 篇笔记
                    返回一个随机数。
                    Math 的 floor,round 和 ceil 方法实例比较
                    参数	Math.floor	Math.round	Math.ceil
                    1.4	1	1	2
                    1.5	1	2	2
                    1.6	1	2	2
                    -1.4	-2	-1	-1
                    -1.5	-2	-1	-1
                    -1.6	-2	-2	-1
                    floor,round 和 ceil 实例：
                    public class Main {
                      public static void main(String[] args) {
                        double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };
                        for (double num : nums) {
                          test(num);
                        }
                      }

                      private static void test(double num) {
                        System.out.println("Math.floor(" + num + ")=" + Math.floor(num));
                        System.out.println("Math.round(" + num + ")=" + Math.round(num));
                        System.out.println("Math.ceil(" + num + ")=" + Math.ceil(num));
                      }
                    }
                    以上实例执行输出结果为：

                    Math.floor(1.4)=1.0
                    Math.round(1.4)=1
                    Math.ceil(1.4)=2.0
                    Math.floor(1.5)=1.0
                    Math.round(1.5)=2
                    Math.ceil(1.5)=2.0
                    Math.floor(1.6)=1.0
                    Math.round(1.6)=2
                    Math.ceil(1.6)=2.0
                    Math.floor(-1.4)=-2.0
                    Math.round(-1.4)=-1
                    Math.ceil(-1.4)=-1.0
                    Math.floor(-1.5)=-2.0
                    Math.round(-1.5)=-1
                    Math.ceil(-1.5)=-1.0
                    Math.floor(-1.6)=-2.0
                    Math.round(-1.6)=-2
                    Math.ceil(-1.6)=-1.0
                     Java switch case 语句Java Character 类
                    6 篇笔记
 Math.floor(-1.4)=-2.0
 Math.round(-1.4)=-1
 Math.ceil(-1.4)=-1.0
 Math.floor(-1.5)=-2.0
 Math.round(-1.5)=-1
 Math.ceil(-1.5)=-1.0
 Math.floor(-1.6)=-2.0
 Math.round(-1.6)=-2
 Math.ceil(-1.6)=-1.0
  Java switch case 语句Java Character 类
 6 篇笔记
